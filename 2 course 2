practice 10 redone 
1.
#include <iostream>
#include <vector>
#include <list>
using namespace std;

class Student{
public:
    string name;
    string surname;
    string lecture_hall;

    Student(string n, string s, string m){
        name = n;
        surname = s;
        lecture_hall = m;

    };
};
class Teacher: public Student{
public:
    list<Student*> group;
    short rank;
    Teacher(string n1, string s1, string m1) : Student(n1, s1, m1) {
        name = n1;
        surname = s1;
        lecture_hall = m1;

    };
    Teacher& visit_card(){
        cout << "Surname: " << surname << endl;
        cout << "Name: " << name << endl;
        cout << "Lecture hall: " << lecture_hall << endl;
        cout << "Rank: " << rank << endl;
    }
};
int main(){
    Teacher Ilya(  "Ilya", "Kolokolnikov","249");
    Student Max( "Maxim", "Kuzmin", "248");
    Student Dan( "Dan", "Schevchenko", "247");

    Ilya.group.push_back(&Max);
    Ilya.group.push_back(&Dan);
    Student* adress = &Max;
    Student frt1 = *adress; // frt1 = *&frt
    return 0;
}

2.
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

class Point{
public:
    int a, b, c;
    Point(){
        a = b = c = 0;
    }
    Point (int a, int b, int c){
        this->a = a;
        this->b = b;
        this->c = c;
    }
    void Print (){
        cout << "A:"<< a<< "B:"<< b<< "C:"<< c << endl;
    }
};
int main (){
    string path = "testing.txt";
    Point point (10, 20, 50);
    ofstream fout;
    fout.open(path, ofstream::app);

        fout.write((char *) &point, sizeof(Point));
    fout.close();
    return 0;
}
3.
#include <iostream>
using namespace std;
int main() {
    int mas[] ={};
    for(int i =0; i<(sizeof(mas)/ sizeof(int)); i++)
    {
        cout<<*(mas+i)<<' ';
    }
    return 0;
}
practice 11
1
#include <iostream>
using namespace std;
class Animal
{
public:
    string name;
    string feature;
    string sound;
    Animal(string name, string feature = "", string sound = "")
    {
        this->name=name;
        this->feature=feature;
        this->sound=sound;
    };
    Animal& get_sound (string sound)
    {
        sound;
    }
    Animal& get_action(string feature)
    {
        feature;
    }
    
};
2
class Farm_Animal: public Animal
{
public:
    string resource;
    Farm_Animal(string name,string feature,string sound,string resource): Animal(name,feature,sound)
    {
        this->resource= resource;
    }
    Farm_Animal& get_source(string res)
    {
        int find = false;
        for (int i = 0; i < resource.size(); i++)
        {
            if(res == resource[i]) find++;
        }
        if(find) cout << "Got "<< res << " from "<< name << endl;
        else cout<< name << " no has " << res<< endl;
    }
};
3
class Cow: public Farm_Animal
{
public:
    Cow(string name,string feature,string sound,string resource): Farm_Animal(name,feature,sound, resource){
        
    };
    Cow& get_action(string object)
    {
        cout << name <<' '<< feature<< ' '<< object << endl;
    }
};
class Pig: public Farm_Animal
{
public:
    Pig(string name,string feature,string sound,string resource): Farm_Animal(name,feature,sound, resource){

    };
    Pig& get_action(string object)
    {
        cout << name<< ' '<< feature<< ' '<< object << endl;
    }
};
class Goat: public Farm_Animal
{
public:
    Goat(string name,string feature,string sound, string resource): Farm_Animal(name,feature,sound, resource){
        
    };
    Goat& get_action(string object)
    {
        cout << name << ' ' << feature<< ' ' << object << endl;
    }
};
class Sheep: public Farm_Animal
{
public:
    Sheep(string name,string feature,string sound, string resource): Farm_Animal(name,feature,sound, resource){
        
    };
    Sheep& get_action(string object)
    {
        cout << name << ' ' << feature<< ' '<< object << endl;
    }
};

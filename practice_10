1.
n=int(input())
def fibonacci(n):
    if n in (1, 2):
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)
print(fibonacci(n))
2.
На каждом этапе выполнения функции n будет вызываться дважды.
Поэтому можно сделать вывод, что сложность функции будет вычисляться как 2^n
3.
fib_cache = {1: 1, 2: 1}
n=int(input())
def mem(n):
    result = fib_cache.get(n)
    if result is None:
        result = mem(n-2) + mem(n-1)
        fib_cache[n] = result
    return result
print(mem(n))
4.
С учетом мемоизвции переменная n вызывается в самом начале, после она вызывается из памяти.
Суммарная сложность алгоритма выйдет n
5.
def f_meme_cyc(n):
    res = voc_fib.get(n)
    while res == None:
        res = f_meme(n-2) + f_meme(n-1)
        voc_fib[n] = res
    return res
